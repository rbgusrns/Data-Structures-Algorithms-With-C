#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct tagBook
{
    char* Name;
}Book;

int ComparePoint( const void*_elem1, const void*_elem2 )
{
    Book* elem1 = (Book*)_elem1;
    Book* elem2 = (Book*)_elem2;

    if(*elem1->Name > *elem2->Name) return 1;
    else if(*elem1->Name < *elem2->Name) return -1;
    else return 0;
}

int Compare( int*a, int*b )
{
    return(*a-*b);
}

void BubbleSort( int* ary , int Length )
{
    int i,j;
    int temp;

    for( i=0; i<Length-1; i++ )
    {
        for( j=0; j < Length-i-1 ; j++)
        {
            if ( ary[j] > ary[j+1] ) 
            {          
                temp = ary[j];
                ary[j] = ary[j+1];
                ary[j+1] = temp;
            }
                
        }
    }
}

void InsertSort( int* ary, int Length )
{
    int i,j;
    int temp;
    for( i = 1; i < Length; i++ ) // 1 - 2 - 3 - 4 - ... - Length-1 
    {
        for( j = 0; j < i ; j++ ) // 0 - 0 1 - 0 1 2 - 0 1 2 3 - .... - 0 ... Length-2
        {
            if( ary[i] < ary[j] ) // i = 4 , j = 2, 3
            {
                temp = ary[i]; // temp = 3
                memmove( &ary[j+1], &ary[j], sizeof(ary[0])*(i-j) ); // 1, 2, 4, 4, 5, 3
                //printf("!%d\n",ary[3]);
                //printf("!%d\n",ary[i+1]); // 1, 2, 3, 4, 5, 3
                ary[j] = temp;

            }
        }
    }
}

int Partition( int* ary, int Left, int Right ) // 3 5
{
    int first = Left; //3
    int temp;
    ++Left; // 4

    if( Left <= Right ) //4 5
    {

        while( Left <= Right )
        {
            while( ary[Left]<=ary[first] && Left<Right )
                Left++;//4
            
            while( ary[Right]>=ary[first] && Left<=Right )
                Right--; //3
    
            if(Left<Right) // 
            {
                temp = ary[Left];
                ary[Left] = ary[Right];
                ary[Right] = temp;
            } // 3 5 4 
    //                
            else break;
        }

        temp = ary[first];
        ary[first] = ary[Right];
        ary[Right] = temp;
    } // 1 2 3 3 5 4 6

    return Right; // 6
}
 // 3 2 4 6 5 1 3
void QuickSort( int* ary, int Left, int Right ) // 3~5
{
    if( Left<Right )
    {
        int Index = Partition( ary, Left, Right ); // 3
    
        QuickSort( ary, Left, Index-1 ); // 3~2
        QuickSort( ary, Index+1, Right ); //4~5
    }
}

int main() 
{
    
    Book N[10] = { "english", "see", "korea", "hello", "world", "live", "summit", "pizza", "dog", "cat"};

    int array[] = {  3, 2, 4, 6, 5, 1, 3 };
    char abc[5] = { "acbed" };
    int length = sizeof(array) / sizeof(array[0]);
    int len = sizeof(N) / sizeof(N[0]);
    //printf("!%d\n",len);

    //BubbleSort( array, length );
    //InsertSort( array, length );
    //QuickSort( array, 0, length-1 ); // 0 ~ 6
    qsort( (void*)N, len, sizeof(char*), ComparePoint );
    //qsort( array, length, sizeof(int), Compare );
    
    for(int i=0; i<len; i++)
    {
        printf("%s\n",N[i].Name);
    }

    //printf("%s",abc);
    return 0;
}
