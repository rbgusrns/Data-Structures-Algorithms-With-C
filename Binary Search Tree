#include <stdio.h>
#include <stdlib.h>

typedef struct tagNode
{
    struct tagNode* Left;
    struct tagNode* Right;

    int Data;
} Node;

Node* SearchNode( Node* Tree, int target )
{
    if (Tree == NULL) return NULL ;

    if (Tree->Data == target) return Tree;

    else if( Tree->Data > target )  return SearchNode( Tree->Left , target );
    
    else return SearchNode( Tree->Right , target );
}

void InsertNode( Node*Tree, Node* Child )
{
    if( Tree->Data > Child->Data ) 
    {
        if( Tree->Left == NULL ) Tree->Left = Child;

        else InsertNode( Tree->Left, Child );
    }
    else  
    {
        if( Tree->Right == NULL ) Tree->Right = Child;

        else InsertNode( Tree->Right, Child );
    }
}

Node* FindMinNode( Node* Tree )
{
    if(Tree == NULL) return NULL;

    if(Tree->Left == NULL) return Tree;

    else return FindMinNode(Tree->Left);
}

Node* RemoveNode( Node* Tree, Node* Parent, int target )
{
    Node* Removed = NULL;
    
    if (Tree == NULL) return NULL;

    if( Tree->Data > target )
        Removed = RemoveNode( Tree->Left, Tree, target );
        
    else if( Tree->Data < target )  
        Removed = RemoveNode( Tree->Right, Tree, target ); 
        
    else
    {
        Removed = Tree; //22

        if(Tree->Left == NULL && Tree->Right == NULL)
        {
            if(Parent->Left == Tree)
                Parent->Left = NULL;

            else if(Parent->Right == Tree) 
                Parent->Right = NULL;
        }
        else
        {
            if(  Tree->Right != NULL && Tree->Left != NULL )
            {
                Node* MinNode = FindMinNode( Tree->Right ); //98
                MinNode = RemoveNode( Tree, NULL, MinNode->Data ); //98 
                Tree->Data = MinNode->Data; //34
                free(MinNode);
                
            }
            else
            {
                if(Parent->Left == Tree)
                {
                    if(Tree->Left != NULL) 
                    {
                        Parent->Left = Tree->Left;
                        Tree->Left = NULL;
                    }

                    else 
                    {
                        Parent->Left = Tree->Right;
                        Tree->Right = NULL;
                    }
                }
    
                else
                {
                    if(Tree->Left != NULL) Parent->Right = Tree->Left;

                    else Parent->Right = Tree->Right;
                }
            }
        }
    }

    return Removed;

}



void DestroyTree( Node*Tree )
{
    if( Tree == NULL ) return;

    if ( Tree->Right != NULL )
        DestroyTree(Tree->Right);

    if ( Tree->Left != NULL )
        DestroyTree(Tree->Left);

    Tree->Left = NULL;
    Tree->Right = NULL;
    free(Tree);
}

Node* CreateNode( int data )
{
    Node* NewNode = (Node*)malloc(sizeof(Node));

    NewNode->Left = NULL;
    NewNode->Right = NULL;
    NewNode->Data = data;

    return NewNode;
}

void InOrderPrintTree( Node* Tree )
{
    if (Tree == NULL) return;

    if (Tree->Left != NULL)
    InOrderPrintTree(Tree->Left);

    printf("%d ",Tree->Data);
    
    if (Tree->Right != NULL)
    InOrderPrintTree(Tree->Right);

}

void PostPrintTree( Node* Tree )
{
    if (Tree == NULL) return;

    if (Tree->Left != NULL)
    PostPrintTree(Tree->Left);
    
    if (Tree->Right != NULL)
    PostPrintTree(Tree->Right);

    printf("%d ",Tree->Data);
}

void PrintSearchResult(int SearchTarget, Node* Result)
{
    if(Result != NULL)
        printf("Found : %d \n", Result->Data);
    else
        printf("Not Found:  %d\n", SearchTarget);
}

int main( void )
{    
    //  노드 생성 
    Node* Tree = CreateNode(123);
    Node* Node = NULL;

    //  트리에 노드 추가 
    InsertNode( Tree, CreateNode(22) );
    InsertNode( Tree, CreateNode(9918) );
    InsertNode( Tree, CreateNode(424) );
    InsertNode( Tree, CreateNode(17) );
    InsertNode( Tree, CreateNode(3) );

    InsertNode( Tree, CreateNode(98) );
    InsertNode( Tree, CreateNode(34) );

    InsertNode( Tree, CreateNode(760) );
    InsertNode( Tree, CreateNode(317) );
    InsertNode( Tree, CreateNode(1) );
    
    int SearchTarget = 17;
	Node =  SearchNode(Tree, SearchTarget );
    PrintSearchResult(SearchTarget, Node);
 
    SearchTarget = 117;
    Node =  SearchNode(Tree, SearchTarget );
    PrintSearchResult(SearchTarget, Node);

    //  트리 출력 
    InOrderPrintTree( Tree );
    printf( "\n");

    //  특정 노드 삭제 
    printf( "Removing 22...\n");

    Node = RemoveNode( Tree, NULL, 22 );
    //free(Node);

    printf( "Removing 9918...\n");

    Node = RemoveNode( Tree, NULL, 9918 );
    free(Node);
    
    InOrderPrintTree( Tree );
    printf( "\n");

    //  새 노드 삽입 
    printf( "Inserting 111...\n");

    InsertNode( Tree, CreateNode(111) );
    InOrderPrintTree( Tree );
    printf( "\n");

    //  트리 소멸시키기 
    DestroyTree( Tree );
    

    return 0;
}
