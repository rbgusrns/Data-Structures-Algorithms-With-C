#include <stdio.h>
#include <stdlib.h>
#include <string.h>

typedef struct tagNode
{
    struct tagNode* NextNode;
    int Data;

} Node;

typedef struct tagQueue
{
    Node* Front;
    Node* Rear;
    int Count;

} LQueue;

void CreateQueue( LQueue**Queue )
{
    (*Queue) = (LQueue*)malloc(sizeof(LQueue));
    (*Queue)->Front = NULL;
    (*Queue)->Rear = NULL;
    (*Queue)->Count = 0;
}

int Empty(LQueue*Queue)
{
    return ( Queue->Front == NULL );
}

Node* DeQueue( LQueue* Queue )
{
    Node*NowNode = Queue->Front;

    if(Queue->Front == NULL) return NULL;

    else if( Queue->Front->NextNode == NULL)
    {
        Queue->Front = NULL;
        Queue->Rear = NULL;
        
    }
    else
    {
        Queue->Front = Queue->Front->NextNode;
    }

    //if(Queue->Front != NULL) 
        Queue->Count--;
    
    return NowNode;
}

void DestroyQueue( LQueue*Queue )
{
    while( !Empty(Queue) )
    {
        Node* Popped = DeQueue( Queue );
        free(Popped);
    }

    free(Queue);
}

Node* CreateNode( int data )
{
    Node* NewNode = (Node*)malloc(sizeof(Node));
    NewNode->Data = data;
    NewNode->NextNode = NULL;

    return NewNode;
}

void EnQueue( LQueue* Queue, Node*NewNode )
{
    if(Queue->Front == NULL)
    {
        Queue->Front = NewNode;
        Queue->Rear = NewNode;
        Queue->Count++;
    }
    else
    {
        Queue->Rear->NextNode = NewNode;
        Queue->Rear = NewNode;
        Queue->Count++;
    }
}




int main() 
{
    LQueue* Queue;
    Node* Popped;

    CreateQueue(&Queue);
    
    
    int N;
    char Order[6];
    scanf("%d",&N);

    for(int i=0;i<N;i++)
    {
        getchar();
        scanf("%s",Order);

        if(!strcmp(Order,"push"))
        {
            int A;
            scanf("%d",&A);
            EnQueue(Queue,CreateNode(A));
        }

        else if(!strcmp(Order,"pop"))
        {
            Popped = DeQueue(Queue);
            
            if(Popped == NULL) printf("-1\n");

            else 
            {
                printf("%d\n",Popped->Data);
                free(Popped);
            }


        }
        else if(!strcmp(Order,"size"))
        {
            //if (Queue->Count ==0) printf("-1\n");

            printf("%d\n",Queue->Count);
        }
        else if(!strcmp(Order,"empty"))
        {
            printf("%d\n",Empty(Queue));
        }
        else if(!strcmp(Order,"front"))
        {
            if (Queue->Count ==0) printf("-1\n");

            else printf("%d\n",Queue->Front->Data);            
        }
        else if(!strcmp(Order,"back"))
        {
            if (Queue->Count ==0) printf("-1\n");

            else printf("%d\n",Queue->Rear->Data);            
        }
        
    }
    DestroyQueue( Queue );
    return 0;
}
