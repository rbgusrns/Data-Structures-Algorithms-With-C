#ifndef DOUBLY_LINKEDLIST_H
#define DOUBLY_LINKEDLIST_H

#include <stdio.h>
#include <stdlib.h>

typedef int ElementType;

typedef struct tagNode
{
    ElementType Data;
    struct tagNode* PrevNode;
    struct tagNode* NextNode;
    int Num;
} Node;

// 함수 원형 선언 
Node* DLL_CreateNode( ElementType NewData );
void  DLL_DestroyNode( Node* Node);
void  DLL_AppendNode( Node** Head, Node* NewNode );
void  DLL_InsertAfter( Node* Current, Node* NewNode );
void  DLL_RemoveNode( Node** Head, Node* Remove );
Node* DLL_GetNodeAt( Node* Head, int Location );
int   DLL_GetNodeCount( Node* Head );
void PrintNode( Node* _Node );
void PrintReverse(Node* Head);

#endif

Node* DLL_CreateNode( ElementType NewData )
{
    Node* NewNode = (Node*)malloc(sizeof(Node));

    NewNode->Data = NewData;
    NewNode->PrevNode = NULL;
    NewNode->NextNode = NULL;

    return NewNode;
}

//  노드 소멸 
void DLL_DestroyNode( Node* Node )
{
    free(Node);
}

//  노드 추가 
void DLL_AppendNode( Node** Head, Node* NewNode )
{
    int i=0;
    //  헤드 노드가 NULL이라면 새로운 노드가 Head 
    if ( (*Head) == NULL ) 
    {
        *Head = NewNode;
        NewNode -> Num = 0 ;
    } 
    else
    {
        //  테일을 찾아 NewNode를 연결한다. 
        Node* Tail = (*Head);
        while ( Tail->NextNode != NULL )
        {
            Tail = Tail->NextNode;
            i++;
        }
        Tail->Num = i;
        Tail->NextNode = NewNode;
        NewNode->PrevNode = Tail; //  기존의 테일을 새로운 테일의 PrevNode가 가리킨다. 
        NewNode->Num = i+1;
    }
}

//  노드 삽입 
void DLL_InsertAfter( Node* Current, Node* NewNode )
{
    Node* Temp = NewNode;
    NewNode->NextNode = Current->NextNode;
    NewNode->PrevNode = Current;

    if ( Current->NextNode != NULL )
    {
        Current->NextNode->PrevNode = NewNode;
        Current->NextNode = NewNode;
    }

    NewNode->Num = Current->Num +1 ;
    
    while( Temp != NULL )
    {
        Temp->Num += 1;
        Temp = Temp->NextNode;
    }
    
    
}

//  노드 제거 
void DLL_RemoveNode( Node** Head, Node* Remove )
{
    if ( *Head == Remove )
    {
        *Head = Remove->NextNode;
        if ( (*Head) != NULL )
            (*Head)->PrevNode = NULL;
        
        Remove->PrevNode = NULL;
        Remove->NextNode = NULL;
        Remove->Num = 0;
    }
    else
    {
        Node* Temp = Remove;

        if ( Remove->PrevNode != NULL )
            Remove->PrevNode->NextNode = Temp->NextNode;

        if ( Remove->NextNode != NULL )
            Remove->NextNode->PrevNode = Temp->PrevNode;

        Remove->NextNode->Num -= 1 ;
        Remove->PrevNode = NULL;
        Remove->NextNode = NULL;
        Remove->Num = 0;
//////////////////////////////////////////////
    

/////////////////////////////////////////////
    }    
}

//  노드 탐색 
Node* DLL_GetNodeAt( Node* Head, int Location )
{
    Node* Current = Head;

    while ( Current != NULL && (--Location) >= 0)
    {
        Current = Current->NextNode;
    }

    return Current;
}

//  노드 수 세기 
int DLL_GetNodeCount( Node* Head )
{
    unsigned int  Count = 0;
    Node*         Current = Head;

    while ( Current != NULL )
    {
        Current = Current->NextNode;
        Count++;
    }

    return Count;
}

void PrintNode( Node* _Node )
{
    if ( _Node->PrevNode == NULL )
        printf("Prev: NULL");
    else
        printf("Prev: %d", _Node->PrevNode->Data);

    printf(" Current: %d ", _Node->Data);

    if ( _Node->NextNode == NULL )
        printf("Next: NULL\n");
    else
        printf("Next: %d\n", _Node->NextNode->Data);
}

void PrintReverse(Node* Head)
{
    int i=0;
    Node* Current = Head;

    while( Current != NULL )
    {
        printf( "List[%d] : %d\n", i, Current->Data );
        Current = Current->PrevNode;
        i++;
    }
}

int main( void )
{
    int   i       = 0;
    int   Count   = 0;
    Node* List    = NULL;
    Node* NewNode = NULL;
    Node* Current = NULL;

    //  노드 5개 추가 
    for ( i = 0; i<5; i++ )
    {
        NewNode = DLL_CreateNode( i );
        DLL_AppendNode( &List, NewNode );
    }

    //  리스트 출력 
    Count = DLL_GetNodeCount( List );
    for ( i = 0; i<Count; i++ )
    {
        Current = DLL_GetNodeAt( List, i );
        printf( "List[%d] : %d\n", i, Current->Data );
    }

    Current = DLL_GetNodeAt( List, 4 );
    printf("Number = %d\n",Current->Num);

    //  리스트의 세번째 칸 뒤에 노드 삽입 
    printf( "\nInserting 3000 After [2]...\n\n" );

    Current = DLL_GetNodeAt( List, 2 );
    NewNode = DLL_CreateNode( 3000 );
    DLL_InsertAfter( Current, NewNode );

    
    Current = DLL_GetNodeAt( List, 5 );
    printf("Number = %d\n",Current->Num);
    
    //PrintReverse(Current);

    //  리스트 출력 
    Current = DLL_GetNodeAt( List, 4 );
    DLL_RemoveNode( &List, Current );
    DLL_DestroyNode( Current );

    Current = DLL_GetNodeAt( List, 4 );
    printf("Number = %d\n",Current->Num);
    
    Count = DLL_GetNodeCount( List );
    for ( i = 0; i<Count; i++ )
    {
        Current = DLL_GetNodeAt( List, i );
        printf( "List[%d] : %d\n", i, Current->Data );
    }

    

    //  모든 노드를 메모리에서 제거     
    printf( "\nDestroying List...\n" );

    Count = DLL_GetNodeCount(List);

    for ( i = 0; i<Count; i++ )
    {
        Current = DLL_GetNodeAt( List, 0 );

        if ( Current != NULL ) 
        {
            DLL_RemoveNode( &List, Current );
            DLL_DestroyNode( Current );
        }
    }

    return 0;
}
