//LinkedList.h

#ifndef LINKEDLIST_H
#define LINKEDLIST_H

#include <stdio.h>
#include <stdlib.h>

typedef int ElementType;

typedef struct tagNode
{
    ElementType Data;
    struct tagNode* NextNode;
} Node;

Node* SLL_CreateNode(ElementType NewData);
void SLL_DestroyNode(Node* Node);
void SLL_DestroyAllNodes(Node** List);
void SLL_AppendNode(Node** Head, Node* NewNode);
void SLL_InsertAfter(Node* Current, Node* NewNode);
void SLL_InsertBefore(Node** Head, Node* Current,Node* NewHead);
void SLL_InsertNewHead(Node** Head, Node* NewHead);
void SLL_RemoveNode(Node** Head, Node* Remove);
Node* SLL_GetNodeAt(Node* Head, int Location);
int SLL_GetNodeCount(Node* Head);

#endif

//LinkedList.c

//#include "LinkedList.h"

Node* SLL_CreateNode(ElementType NewData)
{
    Node* NewNode = (Node*)malloc(sizeof(Node));

    NewNode->Data = NewData;
    NewNode->NextNode = NULL;

    return NewNode;
}

void SLL_DestroyNode(Node* Node)
{
    free(Node);
}

void SLL_DestroyAllNodes(Node** List)
{
    Node* Temp;
    Node** Head = List;
    while( (*Head) != NULL )
    {
        Temp = *Head;
        *Head = (*Head)->NextNode;
        free(Temp);
    }
    
    //free(*List);
    //free(*Head);
}

void SLL_AppendNode(Node** Head, Node* NewNode)
{
    // if head is null, newnode become head
    if( (*Head) == NULL )
    {
        *Head = NewNode;
    }
    else 
    {
        //find tail and link newNode
        Node* Tail = (*Head);
        while ( Tail->NextNode != NULL )  // to tail
        {
            Tail = Tail->NextNode;
        }

        Tail->NextNode = NewNode;
    }
}

void SLL_InsertAfter(Node* Current, Node* NewNode)
{
    NewNode->NextNode = Current->NextNode;
    Current->NextNode = NewNode;
}

void SLL_InsertBefore(Node** Head, Node* Current, Node* NewHead)
{

    Node* Tail = (*Head);
    
    while( Tail != NULL && Tail->NextNode != Current )
    {
        Tail = Tail->NextNode;
    }

    Tail->NextNode = NewHead;
    NewHead->NextNode = Current;
}

void SLL_InsertNewHead(Node** Head, Node* NewHead)
{
    if( (*Head) == NULL)
    {
        (*Head) = NewHead;
    }
    else
    {
        NewHead->NextNode = (*Head);
        (*Head) = NewHead;
    }
}

void SLL_RemoveNode(Node** Head, Node* Remove)
{
    if( (*Head) == Remove )
    {
        (*Head) = Remove->NextNode;
    }
    else
    {
        Node* Current = *Head;
        while( Current != NULL && Current->NextNode != Remove )
        {
            Current = Current->NextNode;
        }

        if( Current != NULL )
        {
            Current->NextNode = Remove->NextNode;
        }
    }
}

Node* SLL_GetNodeAt(Node* Head, int Location)
{
    Node* Current = Head;

    while( Current != NULL && (--Location) >=0 )
    {
        Current = Current->NextNode;
    }

    return Current;
}

int SLL_GetNodeCount(Node* Head)
{
    int Count = 0;
    Node* Current = Head;

    while( Current != NULL )
    {
        Current = Current->NextNode;
        Count++;
    }

    return Count;
}

//Test_LinkedList.c

//#include "LinkedList.h"

int main( void )
{
    int   i       = 0;
    int   Count   = 0;
    Node* List    = NULL;
    Node* Current = NULL;
    Node* NewNode = NULL;

    //  노드 5개 추가 
    for ( i = 0; i<5; i++ )
    {
        NewNode = SLL_CreateNode(i);
        SLL_AppendNode(&List, NewNode);
    }

    NewNode = SLL_CreateNode(-1);
    SLL_InsertNewHead(&List, NewNode);

    NewNode = SLL_CreateNode(-2);
    SLL_InsertNewHead(&List, NewNode);

    //  리스트 출력 
    Count = SLL_GetNodeCount(List);
    for ( i = 0; i<Count; i++ )
    {
        Current = SLL_GetNodeAt(List, i);
        printf("List[%d] : %d\n", i, Current->Data);
    }

    //  리스트의 세번째 노드 뒤에 새 노드 삽입 
    printf("\nInserting 3000 After [2]...\n\n");

    Current = SLL_GetNodeAt(List, 2);
    NewNode  = SLL_CreateNode(3000);

    SLL_InsertAfter(Current, NewNode);

    //Current = SLL_GetNodeAt(List, 4);
    NewNode  = SLL_CreateNode(2000);
    
    SLL_InsertBefore(&List,Current,NewNode);

    //  리스트 출력 
    Count = SLL_GetNodeCount(List);
    for ( i = 0; i<Count; i++ )
    {
        Current = SLL_GetNodeAt(List, i);
        printf("List[%d] : %d\n", i, Current->Data);
    }

    //  모든 노드를 메모리에서 제거     
    printf("\nDestroying List...\n");

    SLL_DestroyAllNodes(&List);

    
    /*

    for ( i = 0; i<Count; i++ )
    {
        Current = SLL_GetNodeAt(List, 0);

        if ( Current != NULL ) 
        {
            SLL_RemoveNode(&List, Current);
            SLL_DestroyNode(Current);
        }
    }

    */

    Count = SLL_GetNodeCount(List);
    for ( i = 0; i<Count; i++ )
    {
        Current = SLL_GetNodeAt(List, i);
        printf("List[%d] : %d\n", i, Current->Data);
    }
    

    return 0;
}
